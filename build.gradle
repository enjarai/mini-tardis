plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.4.4"
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url 'https://maven.enjarai.dev/releases' }
	maven { url 'https://maven.enjarai.nl/mirrors' }

	// Polymer and other server-side utils
	maven { url 'https://maven.nucleoid.xyz' }

	// Permissions API
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

	// CCA
	maven { url 'https://maven.ladysnake.org/releases' }

	// Crash pipe
	maven { url "https://maven.kikugie.dev/releases"}
}

loom {
    runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=mini_tardis"
 
			runDir "build/datagen"
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cca_version}")
	include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}")

	include modImplementation("nl.enjarai:cicada-lib:${project.cicada_version}") {
		exclude group: "net.fabricmc.fabric-api"
	}

	modApi include("eu.pb4:polymer-core:${property('deps.polymer')}")
	modApi include("eu.pb4:polymer-virtual-entity:${property('deps.polymer')}")
	modApi include("eu.pb4:polymer-resource-pack:${property('deps.polymer')}")
	modApi include("eu.pb4:polymer-blocks:${property('deps.polymer')}")
	modRuntimeOnly("eu.pb4:polymer-autohost:${property('deps.polymer')}")
	modApi include("xyz.nucleoid:server-translations-api:${property('deps.server_translations_api')}")
	include(modApi("me.lucko:fabric-permissions-api:${property('deps.permissions_api')}"))
	modApi include("xyz.nucleoid:fantasy:${property('deps.fantasy')}")
	modApi include("eu.pb4:map-canvas-api:${property('deps.map_api')}")
}

processResources {
	var replaceProperties = [
			version: version,
			modrinth_id: modrinth_id,
			curseforge_id: curseforge_id,
			github_repo: github_repo,
	]
	inputs.properties replaceProperties
	filesMatching(['pack.mcmeta', 'fabric.mod.json', '*.mixins.json']) {
		expand replaceProperties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	repositories {
		maven {
			name = "enjaraiMaven"
			url = "https://maven.enjarai.nl/releases"
			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			groupId = project.maven_group
			artifactId = archivesBaseName
			version = project.version

			from components.java
		}
	}
}

publishMods {
	file = remapJar.archiveFile
	displayName = "${property('mod_version')} for ${property('minecraft_version')}"
	version = project.version
	changelog = getRootProject().file("CHANGELOG.md").text
	type = STABLE
	modLoaders.add("fabric")

	def min = property('target_min')
	def max = property('target_max')

	if (providers.gradleProperty('enjaraiModrinthToken').present) {
		modrinth {
			projectId = property('modrinth_id')
			accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "fabric-api"
			}
			embeds {
				slug = "cardinal-components-api"
			}
			embeds {
				slug = "polymer"
			}
		}
	}

	if (providers.gradleProperty('enjaraiCurseforgeToken').present) {
		curseforge {
			projectId = property('curseforge_id')
			accessToken = providers.gradleProperty('enjaraiCurseforgeToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "fabric-api"
			}
			embeds {
				slug = "cardinal-components-api"
			}
			embeds {
				slug = "polymer"
			}
		}
	}

	if (providers.gradleProperty('enjaraiGithubToken').present) {
		github {
			repository = property('github_repo')
			accessToken = providers.gradleProperty('enjaraiGithubToken').get()

			commitish = "master"
			tagName = project.version
		}
	}
}

tasks.register('publishAll') {
	group 'publishing'
	dependsOn 'publish'
	dependsOn 'publishMods'
}